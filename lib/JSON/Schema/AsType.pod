=head1 SYNOPSIS

    use JSON::Schema::AsType;

    my $schema = JSON::Schema::AsType->new( schema => {
            properties => {
                foo => { type => 'integer' },
                bar => { type => 'object' },
            },
    });

    print 'valid' if $schema->check({ foo => 1, bar => { two => 2 } }); # prints 'valid'

    print $schema->validate_explain({ foo => 'potato', bar => { two => 2 } });

=head1 DESCRIPTION

This module takes in a JSON Schema (L<http://json-schema.org/>) and turns it into a
L<Type::Tiny> type.

=head2 Strings and Numbers

By default, C<JSON::Schema::AsType> follows the 
JSON schema specs and distinguish between strings and 
numbers.

    value    String?  Number?
      "a"      yes      no 
       1       no       yes
      "1"      yes      no

If you want the usual Perl
behavior and considers the JSON schema type C<String>
to be a superset of C<Number>. That is:

    value    String?  Number?
      "a"      yes      no 
       1       yes      yes
      "1"      yes      yes

Then you can set the object's attribute C<strict_string> to C<0>. 
Setting the global variable C<$JSON::Schema::AsType::strict_string> to C<0>
will work too, but that's deprecated and will eventually go away.

=head1 SEE ALSO

=over

=item L<JSON::Schema>

=item L<JSV>

=back

=cut

=method new( %args )

    my $schema = JSON::Schema::AsType->new( schema => $my_schema );

The class constructor. Accepts the following arguments.

=over

=item schema => \%schema

The JSON schema to compile, as a hashref. 

If not given, will be retrieved from C<uri>. 

An error will be thrown is neither C<schema> nor C<uri> is given.

=item uri => $uri

Optional uri associated with the schema. 

If provided, the schema will also 
be added to a schema cache. There is currently no way to prevent this. 
If this is an issue for you, you can manipulate the cache by accessing 
C<%JSON::Schema::AsType::EXTERNAL_SCHEMAS> directly.

=item draft_version => $version

The version of the JSON-Schema specification to use. Accepts C<3>  or C<4>,
defaults to '4'. 


=back

=cut

=method type

Returns the compiled L<Type::Tiny> type.

=method check( $struct )

Returns C<true> if C<$struct> is valid as per the schema.

=method validate( $struct )

Returns a short explanation if C<$struct> didn't validate, nothing otherwise.

=method validate_explain( $struct )

Returns a log explanation if C<$struct> didn't validate, nothing otherwise.

=method validate_schema

Like C<validate>, but validates the schema itself against its specification.


    print $schema->validate_schema;

    # equivalent to

    print $schema->specification_schema->validate($schema);

=method validate_explain_schema

Like C<validate_explain>, but validates the schema itself against its specification.

=method draft_version

Returns the draft version used by the object.

=method spec 

Returns the L<JSON::Schema::AsType> object associated with the
specs of this object's schema. 

I.e., if the current object is a draft4 schema, C<spec> will
return the schema definining draft4.

=cut

=method schema

Returns the JSON schema, as a hashref.

=cut

=method parent_schema 

Returns the L<JSON::Schema::AsType> object for the parent schema, or
C<undef> is the current schema is the top-level one.

=cut

=method fetch( $url )

Fetches the schema at the given C<$url>. If already present, it will use the schema in
the cache. If not, the newly fetched schema will be added to the cache.

=cut

=method uri 

Returns the uri associated with the schema, if any.

=method specification

Returns the JSON Schema specification used by the object.

=method specification_schema

Returns the L<JSON::Schema::AsType> object representing the schema of 
the current object's specification.

=method root_schema

Returns the top-level schema including this schema.

=method is_root_schema

Returns C<true> if this schema is a top-level
schema.

=cut

=method resolve_reference( $ref )

    my $sub_schema = $schema->resolve_reference( '#/properties/foo' );

    print $sub_schema->check( $struct );

Returns the L<JSON::Schema::AsType> object associated with the 
type referenced by C<$ref>.

